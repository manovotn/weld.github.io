---
layout: news
title: Weld 4.0.1.Final
author: Matej Novotny
priority: 1
change_frequency: weekly
excerpt: Weld 4.0.1.Final has been released
desc: Weld 4.0.1.Final has been released
tags: [release]
---
:linkattrs:

First maintainance release of Weld 4 is now available along with API version 4.0.SP1.

The crux of this release is (much like 3.1.7.Final) a rework of Weld's default class defining capabilities.
With 4.0.1.Final you should no longer see illegal reflective access warning so long as you are on JDK 11 or newer.
More details on this are below or in the respective link:https://issues.redhat.com/browse/WELD-2581[JIRA ticket]; in case you encounter any issue with it, please don't hesitate to reach out to us.


So, let's take a closer look:

* Class Defining in Weld
** Weld Core is now a Multi-Release JAR providing two different implementations for JDK 8 and JDK 11 or newer
** Integrators are still encouraged to implement link:https://github.com/weld/api/blob/4.0.SP1/weld-spi/src/main/java/org/jboss/weld/serialization/spi/ProxyServices.java[`ProxyServices`] class from our API
*** All implementations of this interface are now presumed to support class defining (link:https://github.com/weld/api/blob/4.0.SP1/weld-spi/src/main/java/org/jboss/weld/serialization/spi/ProxyServices.java#L138-L150[`ProxyServices#supportsClassDefining()`] is now deprecated and not used)
** For SE environment or an integrator that doesn't implement the aforementioned API, Weld now provides a default implementation of `ProxyServices` which:
*** On JDK 8 behaves the same as it did until now - it cracks open `ClassLoader.defineClass(...)` method and uses that
*** On JDK 11+ it uses a combination of `MethodHandles.Lookup` and a custom `ClassLoader`; the former is used for vast majority of cases with class loader being a solution for edge cases such as default packages or beans from signed JARs

* Other Weld Core Fixes
** `BeanAttributesConfigurator` could incorrectly initialize default qualifiers when `@Named` was involved (link:https://issues.jboss.org/browse/WELD-2659[WELD-2659, window="_blank"])
** Synthetic alternative beans did not trigger `ProcessBean` event as they should when enabled (link:https://issues.jboss.org/browse/WELD-2658[WELD-2658, window="_blank"])
** Fixed proxy creation for beans in default package (link:https://issues.jboss.org/browse/WELD-2657[WELD-2657, window="_blank"])
** Fixed a corner case scenario where a hierarchy of classes with bridge methods would not get correctly intercepted (link:https://issues.jboss.org/browse/WELD-2656[WELD-2656, window="_blank"])
** `ProxyFactory` now creates determininistic proxy names (link:https://issues.jboss.org/browse/WELD-2618[WELD-2618, window="_blank"])
** Decorators for interfaces with non-decorated default method now work properly (link:https://issues.jboss.org/browse/WELD-2647[WELD-2647, window="_blank"])

== WildFly Patch

There is no WildFly patch at the moment. We are currently exploring how to properly ship a patch that would align with WildFly usage of Galleon; the tracking JIRA can be seen (link:https://issues.redhat.com/browse/WELD-2660[here]).

&#91; link:/download/[Download] &#93;
&#91; link:http://docs.jboss.org/weld/reference/4.0.1.Final/en-US/html_single/[Documentation, window="_blank"] &#93;
&#91; link:https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12310891&version=12352776[Release notes, window="_blank"] &#93;
